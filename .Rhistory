setNames(c("c","b","a")) |>
generate_mirt_object()
generate_mirt_object(parsss,mod = "2PL")
parsss <- coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
parsss
generate_mirt_object(parsss,mod = "2PL")
generate_mirt_object(parsss,mod = "2PL",transform = T)
generate_mirt_object <- function(pars,mod='3PL',ncat=2,transform=F) {
traditional2mirt <- function(a,b,c) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(traditional2mirt(vec, mod, ncat=ncat)))
}
if(transform){
pars <- pmap_dfr(.l = list(a=pars$a, b=pars$b, c=pars$c, ncat=list(ncat)), .f = traditional2mirt)
}
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = "2PL", latent_covariance = matrix(2))
return(mirt_object)
}
parsss <- coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
generate_mirt_object(parsss,mod = "2PL",transform = T)
generate_mirt_object <- function(pars,mod='3PL',ncat=2,transform=F) {
traditional2mirt <- function(a,b,c,ncat) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(traditional2mirt(vec, mod, ncat=ncat)))
}
if(transform){
pars <- pmap_dfr(.l = list(a=pars$a, b=pars$b, c=pars$c, ncat=list(ncat)), .f = traditional2mirt)
}
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = "2PL", latent_covariance = matrix(2))
return(mirt_object)
}
parsss <- coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
generate_mirt_object(parsss,mod = "2PL",transform = T)
coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
pars
rm(pars)
generate_mirt_object <- function(pars,mod='3PL',ncat=2,transform=F) {
traditional2mirt <- function(a,b,c,ncat) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(traditional2mirt(vec, mod, ncat=ncat)))
}
if(transform){
pars <- pmap_dfr(.l = list(a=pars$a, b=pars$b, c=pars$c, ncat=list(ncat)), .f = traditional2mirt)
}
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = "2PL", latent_covariance = matrix(2))
return(mirt_object)
}
parsss <- coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
generate_mirt_object(parsss,mod = "2PL",transform = T)
generate_mirt_object <- function(pars,mod='3PL',ncat=2,transform=F) {
traditional2mirt <- function(a,b,c,ncat) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(traditional2mirt(vec, mod, ncat=ncat)))
}
print(pars$c)
if(transform){
pars <- pmap_dfr(.l = list(a=pars$a, b=pars$b, c=pars$c, ncat=list(ncat)), .f = traditional2mirt)
}
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = "2PL", latent_covariance = matrix(2))
return(mirt_object)
}
parsss <- coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
generate_mirt_object(parsss,mod = "2PL",transform = T)
coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
generate_mirt_object(parsss,mod = "3PL",transform = T)
generate_mirt_object <- function(pars,mod='3PL',ncat=2,transform=F) {
traditional2mirt <- function(a,b,c,ncat) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(traditional2mirt(vec, mod, ncat=ncat)))
}
print(pars$c)
if(transform){
pars <- pmap_dfr(.l = list(a = pars$a, b = pars$b, c = pars$c, ncat=list(ncat)), .f = traditional2mirt)
}
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = mod, latent_covariance = matrix(2))
return(mirt_object)
}
parsss <- coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
generate_mirt_object(parsss,mod = "2PL",transform = T)
generate_mirt_object <- function(pars,mod='3PL',ncat=2,transform=F) {
transform <- function(a,b,c,ncat) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(traditional2mirt(vec, mod, ncat=ncat)))
}
print(pars$c)
if(transform){
pars <- pmap_dfr(.l = list(a = pars$a, b = pars$b, c = pars$c, ncat=list(ncat)), .f = transform)
}
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = mod, latent_covariance = matrix(2))
return(mirt_object)
}
parsss <- coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
generate_mirt_object(parsss,mod = "2PL",transform = T)
generate_mirt_object <- function(pars,mod='3PL',ncat=2,transform=F) {
to_mirt <- function(a,b,c,ncat) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(traditional2mirt(vec, mod, ncat=ncat)))
}
if(transform){
pars <- pmap_dfr(.l = list(a = pars$a, b = pars$b, c = pars$c, ncat=list(ncat)), .f = to_mirt)
}
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = mod, latent_covariance = matrix(2))
return(mirt_object)
}
parsss <- coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
generate_mirt_object(parsss,mod = "2PL",transform = T)
generate_mirt_object <- function(pars,mod='3PL',ncat=2,transform=F) {
to_mirt <- function(a,b,c,mod,ncat) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(traditional2mirt(vec, mod, ncat=ncat)))
}
if(transform){
pars <- pmap_dfr(.l = list(a = pars$a, b = pars$b, c = pars$c,mod=list(mod), ncat=list(ncat)), .f = to_mirt)
}
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = mod, latent_covariance = matrix(2))
return(mirt_object)
}
parsss <- coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
generate_mirt_object(parsss,mod = "2PL",transform = T)
generate_mirt_object <- function(pars,mod='3PL',ncat=2,transform=F) {
to_mirt <- function(a,b,c,mod,ncat) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(traditional2mirt(vec, mod, ncat)))
}
if(transform){
pars <- pmap_dfr(.l = list(a = pars$a, b = pars$b, c = pars$c,mod=list(mod), ncat=list(ncat)), .f = to_mirt)
}
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = mod, latent_covariance = matrix(2))
return(mirt_object)
}
parsss <- coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
generate_mirt_object(parsss,mod = "2PL",transform = T)
generate_mirt_object <- function(pars,mod='3PL',ncat=2,transform=F) {
to_mirt <- function(a,b,c,mod,ncat) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(mirt::traditional2mirt(vec, mod, ncat)))
}
if(transform){
pars <- pmap_dfr(.l = list(a = pars$a, b = pars$b, c = pars$c, mod=list(mod), ncat=list(ncat)), .f = to_mirt)
}
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = mod, latent_covariance = matrix(2))
return(mirt_object)
}
parsss <- coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
generate_mirt_object(parsss,mod = "2PL",transform = T)
ltm_model <- tpm(data=altura[,-c(1,2)],constraint=cbind(1:14,1,0))
generate_mirt_object <- function(pars,mod='3PL',ncat=2,transform=F) {
to_mirt <- function(a,b,c,mod,ncat) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(mirt::traditional2mirt(vec, mod, ncat)))
}
if(transform){
pars <- pmap_dfr(.l = list(a = pars$a, b = pars$b, c = pars$c, mod=list(mod), ncat=list(ncat)), .f = to_mirt)
}
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = mod, latent_covariance = matrix(2))
return(mirt_object)
}
parsss <- coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
parsss
mirt_model <- generate_mirt_object(parsss,mod = "2PL",transform = T)
mirt_model
par
ltm_model
pars
pars <- coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
pars
dbWriteTable(con("pars"), "pars")
dbWriteTable(con("altura"), "pars")
con <- function(database){
# criando conexão com a base de dados
lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
cn <- dbConnect(MySQL(), host= "localhost",port= 3307, user = "thiago", password = "123456",
dbname = database)
if(Sys.getlocale("LC_COLLATE")!="Portuguese_Brazil.1252"){dbSendQuery(cn, "SET CHARSET 'utf8';")}
return(cn)
}
dbWriteTable(con("altura"), "pars")
dbWriteTable(con("altura"), pars)
dbWriteTable
dbWriteTable(con("altura"), "pars", pars,overwrite=T)
dbReadTable(con("altura"), "pars")
pars <- dbReadTable(con("altura"), "pars")
pars
mirt_model <- generate_mirt_object(pars,mod = "2PL",transform = T)
mirt_model
plumb(file='api/dev/api.R')$run()
dbReadTable(con("altura"), "pars")
#
# This is a Plumber API. In RStudio 1.2 or newer you can run the API by
# clicking the 'Run API' button above.
#
# In RStudio 1.1 or older, see the Plumber documentation for details
# on running the API.
#
# Find out more about building APIs with Plumber here:
#
#    https://www.rplumber.io/
#
library(plumber)
library(mirtCAT)
library(RMySQL)
library(mirt)
library(dplyr)
library(purrr)
library(stringr)
con <- function(database){
# criando conexão com a base de dados
lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
cn <- dbConnect(MySQL(), host= "db-service",port= 3307, user = "thiago", password = "123456",
dbname = database)
if(Sys.getlocale("LC_COLLATE")!="Portuguese_Brazil.1252"){dbSendQuery(cn, "SET CHARSET 'utf8';")}
return(cn)
}
generate_mirt_object <- function(pars,mod='3PL',ncat=2,transform=F) {
to_mirt <- function(a,b,c,mod,ncat) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(mirt::traditional2mirt(vec, mod, ncat)))
}
if(transform){
pars <- pmap_dfr(.l = list(a = pars$a, b = pars$b, c = pars$c, mod=list(mod), ncat=list(ncat)), .f = to_mirt)
}
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = mod, latent_covariance = matrix(2))
return(mirt_object)
}
altura <- dbReadTable(con("altura"), "altura")
con <- function(database){
# criando conexão com a base de dados
lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
cn <- dbConnect(MySQL(), host= "localhost",port= 3307, user = "thiago", password = "123456",
dbname = database)
if(Sys.getlocale("LC_COLLATE")!="Portuguese_Brazil.1252"){dbSendQuery(cn, "SET CHARSET 'utf8';")}
return(cn)
}
generate_mirt_object <- function(pars,mod='3PL',ncat=2,transform=F) {
to_mirt <- function(a,b,c,mod,ncat) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(mirt::traditional2mirt(vec, mod, ncat)))
}
if(transform){
pars <- pmap_dfr(.l = list(a = pars$a, b = pars$b, c = pars$c, mod=list(mod), ncat=list(ncat)), .f = to_mirt)
}
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = mod, latent_covariance = matrix(2))
return(mirt_object)
}
altura <- dbReadTable(con("altura"), "altura")
altura
dbReadTable(con("altura"), "df")
dbReadTable(con("altura"), "pars")
library(RMySQL)
#
# This is a Plumber API. In RStudio 1.2 or newer you can run the API by
# clicking the 'Run API' button above.
#
# In RStudio 1.1 or older, see the Plumber documentation for details
# on running the API.
#
# Find out more about building APIs with Plumber here:
#
#    https://www.rplumber.io/
#
library(plumber)
library(mirtCAT)
library(RMySQL)
library(mirt)
library(dplyr)
library(purrr)
library(stringr)
con <- function(database){
# criando conexão com a base de dados
lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
cn <- dbConnect(MySQL(), host= "localhost",port= 3307, user = "thiago", password = "123456",
dbname = database)
if(Sys.getlocale("LC_COLLATE")!="Portuguese_Brazil.1252"){dbSendQuery(cn, "SET CHARSET 'utf8';")}
return(cn)
}
# -----------------------------------
library(ltm)
ltm_model <- tpm(data=altura[,-c(1,2)],constraint=cbind(1:14,1,0))
pars <- coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
pars
dbWriteTable(con("altura"), "pars", pars,overwrite=T)
results <- function(){
url <- "http://api-service:1994/"
url_role <- "results"
encode <- "json"
response <- VERB(
"GET",
url = paste0(url,url_role),
content_type("application/json"),
accept("application/json"))
fromJSON(content(response, "text"))
}
results()
library(shiny)
library(shinydashboard) # <-- Change this line to: library(semantic.dashboard)
library(httr)
library(jsonlite)
library(ggplot2)
results()
results <- function(){
url <- "http://localhost:1994/"
url_role <- "results"
encode <- "json"
response <- VERB(
"GET",
url = paste0(url,url_role),
content_type("application/json"),
accept("application/json"))
fromJSON(content(response, "text"))
}
results()
api_result <- results()
api_result
api_result$theta_hist[length(api_result$theta_hist)]
library(shiny)
library(shinydashboard) # <-- Change this line to: library(semantic.dashboard)
library(httr)
library(jsonlite)
library(ggplot2)
start_test <- function(min_items=5,max_items=10){
url <- "http://localhost:1994/"
url_role <- "new_test"
payload <- toJSON(auto_unbox = T,
list(
min_items = min_items,
max_items = max_items
))
encode <- "json"
response <- VERB(
"POST",
url = paste0(url,url_role),
body = payload,
content_type("application/json"),
accept("application/json"), encode = encode)
fromJSON(content(response, "text"))
}
answer_question <- function(response){
url <- "http://localhost:1994/"
url_role <- "answer_question"
payload <- toJSON(auto_unbox = T,
list(
response = response
))
encode <- "json"
response <- VERB(
"POST",
url = paste0(url,url_role),
body = payload,
content_type("application/json"),
accept("application/json"), encode = encode)
fromJSON(content(response, "text"))
}
results <- function(){
url <- "http://localhost:1994/"
url_role <- "results"
encode <- "json"
response <- VERB(
"GET",
url = paste0(url,url_role),
content_type("application/json"),
accept("application/json"))
fromJSON(content(response, "text"))
}
plot_theta <- function(){
res <- results()
df <- data.frame(
item=factor(res$ites_answered),
theta_hist=res$theta_hist[-1],
theta_se_hist=res$theta_se_hist[-1],
thetasSEhigh=(res$theta_hist+res$theta_se_hist)[-1],
thetasSElow=(res$theta_hist-res$theta_se_hist)[-1])
df|>
ggplot(aes(x=item,y=theta_hist, group=1))+
geom_line(linewidth=0.7)+
geom_ribbon(aes(ymin=thetasSElow, ymax=thetasSEhigh),alpha=0.3)+
scale_x_discrete(expand = c(0.01,0.01))+
ylab("Altura (em cm)")+xlab("Item")+
theme_bw()
}
ui <- dashboardPage(
dashboardHeader(title = "Altura"),
dashboardSidebar(
sidebarMenu(
column(12,align = "center",offset = 0,actionButton("start","Começar"))
)),
dashboardBody(
fluidRow(
box(width = 12,title = "Teste adaptativo de Altura pela TRI",status = "primary",
tags$div(id = 'placeholder')
)
)
)
)
server <- function(input, output) {
output$SelectCategory <-renderUI({
radioButtons(inputId = "radio",label =  "Nhu",inline = F,
choices = list("Choice 1" = 1, "Choice 2" = 2,"Choice 3" = 3),
selected = 1)
})
## keep track of elements inserted and not yet removed
inserted <- c()
observeEvent(input$start, {
btn <- input$start
id <- paste0('txt', btn)
api_start <- start_test()
item <- api_start$question
choices <- as.character(api_start$question_alternatives)
names(choices) <- choices
removeUI(
## pass in appropriate div id
selector = paste0('#', inserted[length(inserted)])
)
inserted <<- inserted[-length(inserted)]
insertUI(
selector = '#placeholder',
## wrap element in a div with id for ease of removal
ui = tags$div(
box(width =12,
radioButtons(inputId = "resp",label =  item,inline = F,choices = as.list(choices)),
actionButton("next_item","Next")
),
id = id
)
)
inserted <<- c(id, inserted)
})
observeEvent(input$next_item, {
btn <- input$next_item
id <- paste0('txt', btn)
removeUI(
## pass in appropriate div id
selector = paste0('#', inserted[length(inserted)])
)
inserted <<- inserted[-length(inserted)]
response <- input$resp
api_answer_question <- answer_question(response)
item <- api_answer_question$next_question
choices <- as.character(api_answer_question$next_question_alternatives)
names(choices) <- choices
insertUI(
selector = '#placeholder',
## wrap element in a div with id for ease of removal
ui = tags$div(
if(!api_answer_question$is_over){
api_result <- results()
box(width =12,
radioButtons(inputId = "resp",label =  item,inline = F,choices = as.list(choices)),
actionButton("next_item","Next")
)
}else{
box(width =12,
div(h4(paste0("Seu teste acabou, sua altura é de: ", api_result$theta_hist[length(api_result$theta_hist)])),align="center"),
renderPlot({
plot_theta()
})
)
}
,
id = id
)
)
inserted <<- c(id, inserted)
})
}
options(shiny.host = '0.0.0.0')
options(shiny.port = 3838)
shinyApp(ui, server)
