dbWriteTable(con("databasename"), "altura", altura,overwrite=T)
dbReadTable(con("databasename"), "altura")
dbGetQuery(con("databasename"), "select * from altura")
dbWriteTable(con("databasename"), "df", df,overwrite=T)
con <- function(database){
# criando conexão com a base de dados
lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
cn <- dbConnect(MySQL(), host= "localhost",port= 3306, user = "thiago", password = "123456",
dbname = database)
if(Sys.getlocale("LC_COLLATE")!="Portuguese_Brazil.1252"){dbSendQuery(cn, "SET CHARSET 'utf8';")}
return(cn)
}
dbWriteTable(con("databasename"), "df", df,overwrite=T)
dbReadTable(con("databasename"), "df")
dbReadTable(con("databasename"), "altura")
dbWriteTable(con("altura"), "altura", altura,overwrite=T)
dbReadTable(con("altura"), "altura")
dbWriteTable(con("altura"), "df", df,overwrite=T)
dbReadTable(con("altura"), "df")
dbReadTable(con("altura"), "altura")
dbReadTable(con("altura"), "altura")
library(RMySQL)
con <- function(database){
# criando conexão com a base de dados
lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
cn <- dbConnect(MySQL(), host= "localhost",port= 3306, user = "thiago", password = "123456",
dbname = database)
if(Sys.getlocale("LC_COLLATE")!="Portuguese_Brazil.1252"){dbSendQuery(cn, "SET CHARSET 'utf8';")}
return(cn)
}
dbReadTable(con("altura"), "altura")
library(RMySQL)
con <- function(database){
# criando conexão com a base de dados
lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
cn <- dbConnect(MySQL(), host= "localhost",port= 3306, user = "root", password = "my_root_password",
dbname = database)
if(Sys.getlocale("LC_COLLATE")!="Portuguese_Brazil.1252"){dbSendQuery(cn, "SET CHARSET 'utf8';")}
return(cn)
}
dbGetQuery(con("altura"), "SHOW TABLES")
con <- function(database){
# criando conexão com a base de dados
lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
cn <- dbConnect(MySQL(), host= "localhost",port= 3306, user = "dev_user", password = "psdu132435",
dbname = database)
if(Sys.getlocale("LC_COLLATE")!="Portuguese_Brazil.1252"){dbSendQuery(cn, "SET CHARSET 'utf8';")}
return(cn)
}
dbGetQuery(con("altura"), "SHOW TABLES")
con <- function(database){
# criando conexão com a base de dados
lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
cn <- dbConnect(MySQL(), host= "localhost",port= 3307, user = "dev_user", password = "psdu132435",
dbname = database)
if(Sys.getlocale("LC_COLLATE")!="Portuguese_Brazil.1252"){dbSendQuery(cn, "SET CHARSET 'utf8';")}
return(cn)
}
dbGetQuery(con("altura"), "SHOW TABLES")
con <- function(database){
# criando conexão com a base de dados
lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
cn <- dbConnect(MySQL(), host= "localhost",port= 3306, user = "dev_user", password = "psdu132435",
dbname = database)
if(Sys.getlocale("LC_COLLATE")!="Portuguese_Brazil.1252"){dbSendQuery(cn, "SET CHARSET 'utf8';")}
return(cn)
}
dbGetQuery(con("altura"), "SHOW TABLES")
con <- function(database){
# criando conexão com a base de dados
lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
cn <- dbConnect(MySQL(), host= "localhost",port= 3307, user = "dev_user", password = "psdu132435",
dbname = database)
if(Sys.getlocale("LC_COLLATE")!="Portuguese_Brazil.1252"){dbSendQuery(cn, "SET CHARSET 'utf8';")}
return(cn)
}
dbGetQuery(con("altura"), "SHOW TABLES")
con <- function(database){
# criando conexão com a base de dados
lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
cn <- dbConnect(MySQL(), host= "localhost",port= 3307, user = "root", password = "my_root_password",
dbname = database)
if(Sys.getlocale("LC_COLLATE")!="Portuguese_Brazil.1252"){dbSendQuery(cn, "SET CHARSET 'utf8';")}
return(cn)
}
dbGetQuery(con("altura"), "SHOW TABLES")
con <- function(database){
# criando conexão com a base de dados
lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
cn <- dbConnect(MySQL(), host= "localhost",port= 3307, user = "thiago", password = "123456",
dbname = database)
if(Sys.getlocale("LC_COLLATE")!="Portuguese_Brazil.1252"){dbSendQuery(cn, "SET CHARSET 'utf8';")}
return(cn)
}
dbGetQuery(con("altura"), "SHOW TABLES")
con <- function(database){
# criando conexão com a base de dados
lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
cn <- dbConnect(MySQL(), host= "localhost",port= 3307, user = "dev_user", password = "psdu132435",
dbname = database)
if(Sys.getlocale("LC_COLLATE")!="Portuguese_Brazil.1252"){dbSendQuery(cn, "SET CHARSET 'utf8';")}
return(cn)
}
dbGetQuery(con("altura"), "SHOW TABLES")
con <- function(database){
# criando conexão com a base de dados
lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
cn <- dbConnect(MySQL(), host= "localhost",port= 3307, user = "thiago", password = "123456",
dbname = database)
if(Sys.getlocale("LC_COLLATE")!="Portuguese_Brazil.1252"){dbSendQuery(cn, "SET CHARSET 'utf8';")}
return(cn)
}
dbGetQuery(con("altura"), "SHOW TABLES")
dbGetQuery(con("altura"), "SHOW TABLES")
plumber::plumb(file='api/dev/api.R')$run()
plumb(file='api/dev/api.R')$run()
plumb(file='api/dev/api.R')$run()
mirt_model
altura <- dbReadTable(con("altura"), "altura")
df <- dbReadTable(con("altura"), "df")
mirt_model = mirt(altura[,-c(1,2)], itemtype = "2PL", SE = F,verbose = F)
mirt_model
coef(mirt_model)
coef(mirt_model, IRTpars=TRUE, simplify=TRUE)
library(ltm)
altura
tpm(data=altura[,-c(1,2)],constraint=cbind(1:14,1,0))
ltm_model <- tpm(data=altura[,-c(1,2)],constraint=cbind(1:14,1,0))
ltm_model
coef(ltm_model)
coef(ltm_model)$Gussng
coef(ltm_model)
ltm_model$coefficients
ltm_model$IRT.param
ltm_model$X
ltm_model$constraint
ltm_model$X$V3
ltm_model
data.frame(coef(ltm_model))
data.frame(coef(ltm_model))$Gussng
traditional2mirt <- function(a,b,c) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(mirt::traditional2mirt(vec, '3PL', ncat=2)))
}
df_pars <- pmap_dfr(.l = list(a=data.frame(coef(ltm_model))$Dscrmn, b=data.frame(coef(ltm_model))$Dffclt, c=data.frame(coef(ltm_model))$Gussng), .f = traditional2mirt) |>
mutate(item = str_replace(est_itens, "Q","D"))
library(dplyr)
df_pars <- pmap_dfr(.l = list(a=data.frame(coef(ltm_model))$Dscrmn, b=data.frame(coef(ltm_model))$Dffclt, c=data.frame(coef(ltm_model))$Gussng), .f = traditional2mirt) |>
mutate(item = str_replace(est_itens, "Q","D"))
library(purrr)
df_pars <- pmap_dfr(.l = list(a=data.frame(coef(ltm_model))$Dscrmn, b=data.frame(coef(ltm_model))$Dffclt, c=data.frame(coef(ltm_model))$Gussng), .f = traditional2mirt) |>
mutate(item = str_replace(est_itens, "Q","D"))
library(stringr)
df_pars <- pmap_dfr(.l = list(a=data.frame(coef(ltm_model))$Dscrmn, b=data.frame(coef(ltm_model))$Dffclt, c=data.frame(coef(ltm_model))$Gussng), .f = traditional2mirt) |>
mutate(item = str_replace(est_itens, "Q","D"))
df_pars <- pmap_dfr(.l = list(a=data.frame(coef(ltm_model))$Dscrmn, b=data.frame(coef(ltm_model))$Dffclt, c=data.frame(coef(ltm_model))$Gussng), .f = traditional2mirt)
df_pars
lc <- matrix(2)
lc
pars <- pmap_dfr(.l = list(a=data.frame(coef(ltm_model))$Dscrmn, b=data.frame(coef(ltm_model))$Dffclt, c=data.frame(coef(ltm_model))$Gussng), .f = traditional2mirt)
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = "2PL", latent_covariance = lc)
mirt_object
coef(mirt_object, simplify = TRUE)
pars
generate_mirt_object <- function(pars,transform=F) {
traditional2mirt <- function(a,b,c) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(mirt::traditional2mirt(vec, '3PL', ncat=2)))
}
if(transform){
pars <- pmap_dfr(.l = list(a=pars$a, b=pars$b, c=pars$c), .f = traditional2mirt)
}
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = "2PL", latent_covariance = matrix(2))
return(mirt_object)
}
library(mirt)
?traditional2mirt
?traditional2mirt
traditional2mirt
traditional2mirt
?mirt::traditional2mirt
mirt::traditional2mirt
generate_mirt_object <- function(pars,mod='3PL',ncat=2,transform=F) {
traditional2mirt <- function(a,b,c) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(traditional2mirt(vec, mod, ncat=ncat)))
}
if(transform){
pars <- pmap_dfr(.l = list(a=pars$a, b=pars$b, c=pars$c), .f = traditional2mirt)
}
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = "2PL", latent_covariance = matrix(2))
return(mirt_object)
}
ltm_model
coef(ltm_model, simplify = TRUE)
coef(ltm_model, simplify = TRUE) |>
setNames(c("c","b","a"))
coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a")) |>
generate_mirt_object()
generate_mirt_object <- function(pars,mod='3PL',ncat=2,transform=F) {
traditional2mirt <- function(a,b,c) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(traditional2mirt(vec, mod, ncat=ncat)))
}
if(transform){
pars <- pmap_dfr(.l = list(a=pars$a, b=pars$b, c=pars$c), .f = traditional2mirt)
}
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = "2PL", latent_covariance = matrix(2))
return(mirt_object)
}
coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a")) |>
generate_mirt_object()
generate_mirt_object(parsss,mod = "2PL")
parsss <- coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
parsss
generate_mirt_object(parsss,mod = "2PL")
generate_mirt_object(parsss,mod = "2PL",transform = T)
generate_mirt_object <- function(pars,mod='3PL',ncat=2,transform=F) {
traditional2mirt <- function(a,b,c) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(traditional2mirt(vec, mod, ncat=ncat)))
}
if(transform){
pars <- pmap_dfr(.l = list(a=pars$a, b=pars$b, c=pars$c, ncat=list(ncat)), .f = traditional2mirt)
}
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = "2PL", latent_covariance = matrix(2))
return(mirt_object)
}
parsss <- coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
generate_mirt_object(parsss,mod = "2PL",transform = T)
generate_mirt_object <- function(pars,mod='3PL',ncat=2,transform=F) {
traditional2mirt <- function(a,b,c,ncat) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(traditional2mirt(vec, mod, ncat=ncat)))
}
if(transform){
pars <- pmap_dfr(.l = list(a=pars$a, b=pars$b, c=pars$c, ncat=list(ncat)), .f = traditional2mirt)
}
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = "2PL", latent_covariance = matrix(2))
return(mirt_object)
}
parsss <- coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
generate_mirt_object(parsss,mod = "2PL",transform = T)
coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
pars
rm(pars)
generate_mirt_object <- function(pars,mod='3PL',ncat=2,transform=F) {
traditional2mirt <- function(a,b,c,ncat) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(traditional2mirt(vec, mod, ncat=ncat)))
}
if(transform){
pars <- pmap_dfr(.l = list(a=pars$a, b=pars$b, c=pars$c, ncat=list(ncat)), .f = traditional2mirt)
}
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = "2PL", latent_covariance = matrix(2))
return(mirt_object)
}
parsss <- coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
generate_mirt_object(parsss,mod = "2PL",transform = T)
generate_mirt_object <- function(pars,mod='3PL',ncat=2,transform=F) {
traditional2mirt <- function(a,b,c,ncat) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(traditional2mirt(vec, mod, ncat=ncat)))
}
print(pars$c)
if(transform){
pars <- pmap_dfr(.l = list(a=pars$a, b=pars$b, c=pars$c, ncat=list(ncat)), .f = traditional2mirt)
}
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = "2PL", latent_covariance = matrix(2))
return(mirt_object)
}
parsss <- coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
generate_mirt_object(parsss,mod = "2PL",transform = T)
coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
generate_mirt_object(parsss,mod = "3PL",transform = T)
generate_mirt_object <- function(pars,mod='3PL',ncat=2,transform=F) {
traditional2mirt <- function(a,b,c,ncat) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(traditional2mirt(vec, mod, ncat=ncat)))
}
print(pars$c)
if(transform){
pars <- pmap_dfr(.l = list(a = pars$a, b = pars$b, c = pars$c, ncat=list(ncat)), .f = traditional2mirt)
}
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = mod, latent_covariance = matrix(2))
return(mirt_object)
}
parsss <- coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
generate_mirt_object(parsss,mod = "2PL",transform = T)
generate_mirt_object <- function(pars,mod='3PL',ncat=2,transform=F) {
transform <- function(a,b,c,ncat) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(traditional2mirt(vec, mod, ncat=ncat)))
}
print(pars$c)
if(transform){
pars <- pmap_dfr(.l = list(a = pars$a, b = pars$b, c = pars$c, ncat=list(ncat)), .f = transform)
}
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = mod, latent_covariance = matrix(2))
return(mirt_object)
}
parsss <- coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
generate_mirt_object(parsss,mod = "2PL",transform = T)
generate_mirt_object <- function(pars,mod='3PL',ncat=2,transform=F) {
to_mirt <- function(a,b,c,ncat) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(traditional2mirt(vec, mod, ncat=ncat)))
}
if(transform){
pars <- pmap_dfr(.l = list(a = pars$a, b = pars$b, c = pars$c, ncat=list(ncat)), .f = to_mirt)
}
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = mod, latent_covariance = matrix(2))
return(mirt_object)
}
parsss <- coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
generate_mirt_object(parsss,mod = "2PL",transform = T)
generate_mirt_object <- function(pars,mod='3PL',ncat=2,transform=F) {
to_mirt <- function(a,b,c,mod,ncat) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(traditional2mirt(vec, mod, ncat=ncat)))
}
if(transform){
pars <- pmap_dfr(.l = list(a = pars$a, b = pars$b, c = pars$c,mod=list(mod), ncat=list(ncat)), .f = to_mirt)
}
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = mod, latent_covariance = matrix(2))
return(mirt_object)
}
parsss <- coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
generate_mirt_object(parsss,mod = "2PL",transform = T)
generate_mirt_object <- function(pars,mod='3PL',ncat=2,transform=F) {
to_mirt <- function(a,b,c,mod,ncat) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(traditional2mirt(vec, mod, ncat)))
}
if(transform){
pars <- pmap_dfr(.l = list(a = pars$a, b = pars$b, c = pars$c,mod=list(mod), ncat=list(ncat)), .f = to_mirt)
}
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = mod, latent_covariance = matrix(2))
return(mirt_object)
}
parsss <- coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
generate_mirt_object(parsss,mod = "2PL",transform = T)
generate_mirt_object <- function(pars,mod='3PL',ncat=2,transform=F) {
to_mirt <- function(a,b,c,mod,ncat) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(mirt::traditional2mirt(vec, mod, ncat)))
}
if(transform){
pars <- pmap_dfr(.l = list(a = pars$a, b = pars$b, c = pars$c, mod=list(mod), ncat=list(ncat)), .f = to_mirt)
}
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = mod, latent_covariance = matrix(2))
return(mirt_object)
}
parsss <- coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
generate_mirt_object(parsss,mod = "2PL",transform = T)
ltm_model <- tpm(data=altura[,-c(1,2)],constraint=cbind(1:14,1,0))
generate_mirt_object <- function(pars,mod='3PL',ncat=2,transform=F) {
to_mirt <- function(a,b,c,mod,ncat) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(mirt::traditional2mirt(vec, mod, ncat)))
}
if(transform){
pars <- pmap_dfr(.l = list(a = pars$a, b = pars$b, c = pars$c, mod=list(mod), ncat=list(ncat)), .f = to_mirt)
}
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = mod, latent_covariance = matrix(2))
return(mirt_object)
}
parsss <- coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
parsss
mirt_model <- generate_mirt_object(parsss,mod = "2PL",transform = T)
mirt_model
par
ltm_model
pars
pars <- coef(ltm_model, simplify = TRUE) |>
data.frame() |>
setNames(c("c","b","a"))
pars
dbWriteTable(con("pars"), "pars")
dbWriteTable(con("altura"), "pars")
con <- function(database){
# criando conexão com a base de dados
lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
cn <- dbConnect(MySQL(), host= "localhost",port= 3307, user = "thiago", password = "123456",
dbname = database)
if(Sys.getlocale("LC_COLLATE")!="Portuguese_Brazil.1252"){dbSendQuery(cn, "SET CHARSET 'utf8';")}
return(cn)
}
dbWriteTable(con("altura"), "pars")
dbWriteTable(con("altura"), pars)
dbWriteTable
dbWriteTable(con("altura"), "pars", pars,overwrite=T)
dbReadTable(con("altura"), "pars")
pars <- dbReadTable(con("altura"), "pars")
pars
mirt_model <- generate_mirt_object(pars,mod = "2PL",transform = T)
mirt_model
plumb(file='api/dev/api.R')$run()
dbReadTable(con("altura"), "pars")
#
# This is a Plumber API. In RStudio 1.2 or newer you can run the API by
# clicking the 'Run API' button above.
#
# In RStudio 1.1 or older, see the Plumber documentation for details
# on running the API.
#
# Find out more about building APIs with Plumber here:
#
#    https://www.rplumber.io/
#
library(plumber)
library(mirtCAT)
library(RMySQL)
library(mirt)
library(dplyr)
library(purrr)
library(stringr)
con <- function(database){
# criando conexão com a base de dados
lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
cn <- dbConnect(MySQL(), host= "db-service",port= 3307, user = "thiago", password = "123456",
dbname = database)
if(Sys.getlocale("LC_COLLATE")!="Portuguese_Brazil.1252"){dbSendQuery(cn, "SET CHARSET 'utf8';")}
return(cn)
}
generate_mirt_object <- function(pars,mod='3PL',ncat=2,transform=F) {
to_mirt <- function(a,b,c,mod,ncat) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(mirt::traditional2mirt(vec, mod, ncat)))
}
if(transform){
pars <- pmap_dfr(.l = list(a = pars$a, b = pars$b, c = pars$c, mod=list(mod), ncat=list(ncat)), .f = to_mirt)
}
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = mod, latent_covariance = matrix(2))
return(mirt_object)
}
altura <- dbReadTable(con("altura"), "altura")
con <- function(database){
# criando conexão com a base de dados
lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
cn <- dbConnect(MySQL(), host= "localhost",port= 3307, user = "thiago", password = "123456",
dbname = database)
if(Sys.getlocale("LC_COLLATE")!="Portuguese_Brazil.1252"){dbSendQuery(cn, "SET CHARSET 'utf8';")}
return(cn)
}
generate_mirt_object <- function(pars,mod='3PL',ncat=2,transform=F) {
to_mirt <- function(a,b,c,mod,ncat) {
vec <- c(a=a, b=b, c=c, u=1)
data.frame(t(mirt::traditional2mirt(vec, mod, ncat)))
}
if(transform){
pars <- pmap_dfr(.l = list(a = pars$a, b = pars$b, c = pars$c, mod=list(mod), ncat=list(ncat)), .f = to_mirt)
}
## Generate mirt_object for CAT session
mirt_object <- generate.mirt_object(pars, itemtype = mod, latent_covariance = matrix(2))
return(mirt_object)
}
altura <- dbReadTable(con("altura"), "altura")
altura
dbReadTable(con("altura"), "df")
dbReadTable(con("altura"), "pars")
