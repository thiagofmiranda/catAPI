if(!require(data.table))install.packages("data.table");library(data.table)
if(!require(tidyverse))install.packages("tidyverse");library(tidyverse)
if(!require(ggpubr))install.packages("ggpubr");library(ggpubr)
if(!require(mirt))install.packages("mirt");library(mirt)
if(!require(writexl))install.packages("writexl");library(writexl)

gera_grupos <- function(prop){
  
  point <- case_when(
    length(prop)<=300 ~ 1/3,
    length(prop)<=1000 ~ 1/5,
    TRUE ~ 1/7
  )
  
  breaks <- seq(0,1,by=point)
  
  factor(cut(prop, breaks, include.lowest=T, ordered_result =T),labels = as.character(1:(length(breaks)-1)))
}
normalize <- function(x, ...) {
  return((x- min(x,...)) /(max(x,...)-min(x,...)))
}
traditional2mirt <- function(a,b,c) {
  vec <- c(a=a, b=b, c=c, u=1)
  data.frame(t(mirt::traditional2mirt(vec, '3PL', ncat=2)))
}
gera_tri_item_plot <- function(item,thetas_col,df_parametros,save=F,path=""){
  cut_mean_point <- function(x) {
    mean(as.numeric(str_remove_all(str_split(x,"\\,",simplify = T),"\\[|\\]|\\)|\\(")))
  }
  
  probML3 <- function(x,a,b,c){
    c+(1-c)/(1+exp(-a*(x-b)))
  }
  
  itemInfo <- function(x, a,b,c) {
    pi <- probML3(x,a,b,c)
    a^2 * (pi-c)^2 * (1-pi) / ((1-c)^2*pi)
  }
  
  item_pars <- df_parametros |> 
    filter(Item == item | Item == str_replace(item,"Q","D"))
  
  sim_curves <- data.frame(theta=seq(-5,5,by=0.01)) |> 
    mutate(prob = probML3(x=theta,a = item_pars[1,2], b= item_pars[1,3], c = item_pars[1,4])) |> 
    mutate(info = itemInfo(x=theta,a = item_pars[1,2], b= item_pars[1,3], c = item_pars[1,4])) |> 
    mutate(info_2 = info/max(info))
  
  item_resp <- df_respostas_dicotomizadas[,str_replace(item,"Q","D")]
  thetas <- pull(df_respostas_dicotomizadas,thetas_col)
  interval <- cut(thetas, breaks = seq(-3,3,by=0.25))
  point <- map_dbl(.x = interval,.f=cut_mean_point)
  
  df_emp_points <- data.frame(item_resp,point) |> 
    group_by(point) |> 
    summarise(prop=mean(!!sym(str_replace(item,"Q","D"))))
  
  item_plot <- sim_curves |> 
    ggplot(aes(x=theta)) +
    geom_line(aes(y=prob),color="blue",linewidth=1)+
    geom_line(aes(y=info_2),color="red",linewidth=1)+
    scale_y_continuous(sec.axis = sec_axis(~ . * max(sim_curves$info),name = "Informação")) + 
    geom_point(data=df_emp_points,aes(x=point,y=prop))+
    geom_rug(data=NULL, aes(x = item_pars[1,3]), inherit.aes = F)+
    xlim(-5, 5)+
    xlab("Proficiência")+
    ylab("Proporção de Acertos")+
    ggtitle(paste0("Curva Característica do Item ",item))+
    theme_bw()+
    theme(
      legend.position="bottom",
      plot.title = element_text(hjust = 0.5)
    )
  
  
  if(save){
    ggsave(filename = paste0(path,"TRI - item ",item,".png"),plot = item_plot,device = "png",width =10,height = 8)  
  }else{
    return(item_plot)
  }
}
# ------------------------------------------------ Leitura e Tratamento dos dados ------------------------------------------------

# Leitura dos dados dos alunos em CSV
df_PMRI2202_MAT <- fread("1-SME-MAT-9EF/PMRI2202_MAT_atual.csv",encoding = "Latin-1")

# Leitura dos dados de notas dos alunos
df_notas <- fread("1-SME-MAT-9EF/Notas_TRI.csv",dec = ",")

# Filtro do 9 ano
df_alunos <- df_PMRI2202_MAT |> 
  as_tibble() |> 
  filter(serie == "9° ANO EF") |> 
  left_join(dplyr::select(df_notas,RA,proficiencia), by = "RA")

# verificando se há algum aluno sem nota
df_alunos |> 
  filter(is.na(proficiencia)) # Todos tem nota

# Leitura dos parâmetros dos itens compartilhados
df_parametros <- fread("1-SME-MAT-9EF/parametros.csv",dec = ",")


# Selecionando colunas de respostas e convertendo Não respostas em *
df_respostas <- df_alunos |> 
  dplyr::select(inscricao,starts_with("Q")) |> 
  mutate_all(.funs = function(x)ifelse(x=="" | is.na(x),"*",x))

# Criando vetor com nomes dos itens
itens <- df_respostas |> 
  dplyr::select(starts_with("Q")) |> 
  colnames()

n_itens <- length(itens)

# Dicotomizando as respostas, calcuando escore proporção de acertos e grupos 
gabarito <- c("C","B","C","A","A","C","B","D","D","C","C","A","D","C","A","D","D","B","B","C","D","C","C","C","B")

df_gabarito <- data.frame(item=paste0("Q",str_pad(1:25,width=2,side = "left",pad = 0))) |> 
  mutate(gabarito=gabarito)

df_respostas_dicotomizadas <- df_respostas |> 
  pivot_longer(!inscricao,names_to = "item",values_to = "resposta") |> 
  left_join(df_gabarito,by=c("item")) |> 
  mutate(dic = (resposta==gabarito)*1) |> 
  dplyr::select(inscricao,item,dic) |> 
  mutate(item = str_replace(item,"Q","D")) |> 
  group_by(inscricao) |> 
  mutate(escore = sum(dic)) |> 
  mutate(proporcao_acerto = sum(dic)/n_itens) |> 
  pivot_wider(names_from = item,values_from = dic) |> 
  ungroup() |> 
  mutate(grupo = gera_grupos(proporcao_acerto)) 

# Juntando respostas originais e respostas dicotomizadas
df_respostas_stats <- df_respostas |> 
  left_join(df_respostas_dicotomizadas, by = "inscricao")

# Criando vetor com nomes dos itens dicotomizados
resp_itens <- df_respostas_dicotomizadas |> 
  dplyr::select(starts_with("D")) |> 
  colnames()

# ----------------------------------------------------- Análise TRI  ---------------------------------------------------------
# Definindo alunos validos para a calibração dos itens
valid_resp <- df_alunos$validas>=5

#length(valid_resp)-sum(valid_resp)

# -------------------------------------------------- Calibração Rodada 1 -----------------------------------------------------
# Calibrando os parâmetros de todos o itens 

# Selecionando itens da Rodada
est_itens_round_1 <- resp_itens

# Calibrando parâmetros
mod_round_1 <- mirt(df_respostas_dicotomizadas[valid_resp,est_itens_round_1], 1, itemtype= '3PL', SE=T, technical = list(NCYCLES = 10000))

# Parâmetros Estimados
pars_mod_round_1 = coef(mod_round_1, IRTpars=TRUE, simplify=TRUE)$items[,1:3]
pars_mod_round_1


# Conclusão: Os itens 4 e 9 são problemáticos
# Item 04: parâmetro de discriminação com valor negativo
# Item 09: parâmetro de dificuldade com valor elevado

# -------------------------------------------------- Calibração Rodada 2 -----------------------------------------------------
# Calibrando os parâmetros sem o item 04

# Selecionando itens da Rodada
est_itens_round_2 <- resp_itens[!resp_itens %in% c("D04")]

# Calibrando parâmetros
mod_round_2 <- mirt(df_respostas_dicotomizadas[valid_resp,est_itens_round_2], 1, itemtype= '3PL', method = "EM", SE=T, technical = list(NCYCLES = 10000))

# Parâmetros Estimados
pars_mod_round_2 = coef(mod_round_2, IRTpars=TRUE, simplify=TRUE)$items[,1:3]
pars_mod_round_2

# Conclusão: O item 9 continua problemático
# Item 09: parâmetro de dificuldade com valor elevado

# -------------------------------------------------- Calibração Rodada 3 -----------------------------------------------------
# Calibrando parâmetros sem os itens 04 e 09

# Selecionando itens da Rodada
est_itens_round_3 <- resp_itens[!resp_itens %in% c("D04","D09")]

# Calibrando parâmetros
mod_round_3 <- mirt(df_respostas_dicotomizadas[valid_resp,est_itens_round_3], 1, itemtype= '3PL', method = "EM", SE=T, technical = list(NCYCLES = 10000))

# Parâmetros Estimados
pars_mod_round_3 = coef(mod_round_3, IRTpars=TRUE, simplify=TRUE)$items[,1:3]
pars_mod_round_3

# Conclusão: O item 21 é problemático
# Item 21: parâmetro de discriminação com valor elevado


# -------------------------------------------------- Calibração Rodada 4 -----------------------------------------------------
# Calibrando parâmetros sem os itens 04, 09 e 21

# Selecionando itens da Rodada
est_itens_round_4 <- resp_itens[!resp_itens %in% c("D04","D09","D21")]

# Calibrando parâmetros
mod_round_4 <- mirt(df_respostas_dicotomizadas[valid_resp,est_itens_round_4], 1, itemtype= '3PL', method = "EM", SE=T, technical = list(NCYCLES = 10000))

# Parâmetros Estimados
pars_mod_round_4 = coef(mod_round_4, IRTpars=TRUE, simplify=TRUE)$items[,1:3]

pars_mod_round_4


# Salvando Parametros
abas <- list(
  "Vunesp" = df_parametros,
  "Rodada 1" = rownames_to_column(data.frame(pars_mod_round_1),var = "Item"),
  "Rodada 2" = rownames_to_column(data.frame(pars_mod_round_2),var = "Item"),
  "Rodada 3" = rownames_to_column(data.frame(pars_mod_round_3),var = "Item"),
  "Rodada 4" = rownames_to_column(data.frame(pars_mod_round_4),var = "Item")
)
write_xlsx(abas,path = "1-SME-MAT-9EF/TRI/Estimação de Parâmetros.xlsx")


# -------------------------------------------------- Estimação TRI 1 ------------------------------------------------------
# Estimando as proficiências dos alunos em cada rodada

thetas_mod_round_1 <-  fscores(mod_round_1, method = "EAP",response.pattern = df_respostas_dicotomizadas[,est_itens_round_1])
thetas_mod_round_2 <-  fscores(mod_round_2, method = "EAP",response.pattern = df_respostas_dicotomizadas[,est_itens_round_2])
thetas_mod_round_3 <-  fscores(mod_round_3, method = "EAP",response.pattern = df_respostas_dicotomizadas[,est_itens_round_3])
thetas_mod_round_4 <-  fscores(mod_round_4, method = "EAP",response.pattern = df_respostas_dicotomizadas[,est_itens_round_4])

df_respostas_dicotomizadas <- df_respostas_dicotomizadas |> 
  mutate(thetas_mod_round_1 =thetas_mod_round_1[,1]) |> 
  mutate(thetas_mod_round_2 =thetas_mod_round_2[,1]) |> 
  mutate(thetas_mod_round_3 =thetas_mod_round_3[,1]) |> 
  mutate(thetas_mod_round_4 =thetas_mod_round_4[,1]) 

write_xlsx(df_respostas_dicotomizadas,path = "1-SME-MAT-9EF/TRI/Estimação de Habilidade.xlsx")

# -------------------------------------------------- Estimação TRI 2 ------------------------------------------------------
# Estimando as proficiências dos alunos usando parâmetros compartilhados

# Selecionando itens válidos
est_itens <- resp_itens[!resp_itens %in% c("D04")]

# Gerando objetos do mirt para estimar proficiências 

# Parâmetros na escala do mirt
df_pars <- pmap_dfr(.l = list(a=df_parametros$a, b=df_parametros$b, c=df_parametros$c), .f = traditional2mirt) |> 
  mutate(item = str_replace(est_itens, "Q","D"))

# Objeto de parâmetros para ser preenchido 
mirt_par <- mirt(df_respostas_dicotomizadas[est_itens], 1, itemtype= '3PL', pars = 'values')

# Preenchendo objeto de parâmetros do mirt
mirt_par <- mirt_par |> 
  left_join(pivot_longer(df_pars,cols = c(a1,d,g,u),values_to = "new_value"),by=c("item","name")) |> 
  mutate(value = ifelse(is.na(new_value),value,new_value)) |> 
  dplyr::select(group, item, class, name, parnum, value, lbound, ubound,   est, prior.type, prior_1, prior_2)

# Pedindo para não calibrar parâmetros 
mirt_par$est <- FALSE

# Modelo Mirt
mirt_mod <- mirt(df_respostas_dicotomizadas[,est_itens], 1, itemtype= '3PL', pars = mirt_par)

# Procifiências estimadas
thetas_est <-  fscores(mirt_mod, method = "EAP")

# Histograma das proficiências
hist(thetas_est)

df_respostas_dicotomizadas <- df_respostas_dicotomizadas |> 
  mutate(thetas_est_eap = thetas_est[,1]) 


# ------------------------------------------------------ Comparações  ------------------------------------------------------
# Comparando proficiências originais com as estimadas usando os parâmetros da rodada 1
df_alunos |> 
  left_join(df_respostas_dicotomizadas, by = "inscricao") |> 
  ggplot(aes(x = proficiencia , y = thetas_mod_round_1))+geom_point()+theme_bw()+ggtitle("Proficiência Original x Calibração Rodada 1")+
  theme(plot.title = element_text(hjust = 0.5))

# Comparando proficiências originais com as estimadas usando os parâmetros da rodada 2
df_alunos |> 
  left_join(df_respostas_dicotomizadas, by = "inscricao") |> 
  ggplot(aes(x = proficiencia , y = thetas_mod_round_2))+geom_point()+theme_bw()+ggtitle("Proficiência Original x Calibração Rodada 2")+
  theme(plot.title = element_text(hjust = 0.5))

# Comparando proficiências originais com as estimadas usando os parâmetros da rodada 3
df_alunos |> 
  left_join(df_respostas_dicotomizadas, by = "inscricao") |> 
  ggplot(aes(x = proficiencia , y = thetas_mod_round_3))+geom_point()+theme_bw()+ggtitle("Proficiência Original x Calibração Rodada 3")+
  theme(plot.title = element_text(hjust = 0.5))

# Comparando proficiências originais com as estimadas usando os parâmetros da rodada 4
df_alunos |> 
  left_join(df_respostas_dicotomizadas, by = "inscricao") |> 
  ggplot(aes(x = proficiencia , y = thetas_mod_round_4))+geom_point()+theme_bw()+ggtitle("Proficiência Original x Calibração Rodada 4")+
  theme(plot.title = element_text(hjust = 0.5))


# Comparando proficiências originais com as estimadas usando os parâmetros compartilhados
df_alunos |> 
  left_join(df_respostas_dicotomizadas, by = "inscricao") |> 
  ggplot(aes(x = proficiencia , y = thetas_est_eap))+geom_point()+theme_bw()+ggtitle("Proficiência Original x Estimação EAP")+
  theme(plot.title = element_text(hjust = 0.5))





# ------------------------------------------------------ Gráficos ------------------------------------------------------
gera_tri_item_plot(
  item="Q05",
  thetas_col = "thetas_mod_round_1",
  df_parametros = rownames_to_column(data.frame(pars_mod_round_1),var = "Item"),
  save = T,path = "1-SME-MAT-9EF/TRI/RODADA 1/"
)

gera_tri_item_plot(
  item="Q05",
  thetas_col = "thetas_mod_round_2",
  df_parametros = rownames_to_column(data.frame(pars_mod_round_2),var = "Item")
)

gera_tri_item_plot(
  item="Q05",
  thetas_col = "thetas_mod_round_3",
  df_parametros = rownames_to_column(data.frame(pars_mod_round_3),var = "Item")
)

gera_tri_item_plot(
  item="Q05",
  thetas_col = "thetas_mod_round_4",
  df_parametros = rownames_to_column(data.frame(pars_mod_round_4),var = "Item")
)

gera_tri_item_plot(
  item="Q05",
  thetas_col = "thetas_est_eap",
  df_parametros = as.data.frame(df_parametros)
)



pwalk(.l = list(
  item = str_replace(est_itens_round_1,"D","Q"), 
  thetas_col = list("thetas_mod_round_1"),
  df_parametros = list(rownames_to_column(data.frame(pars_mod_round_1),var = "Item")),
  save = list(T), 
  path = list("1-SME-MAT-9EF/TRI/RODADA 1/")), 
  .f = gera_tri_item_plot)

pwalk(.l = list(
  item = str_replace(est_itens_round_2,"D","Q"), 
  thetas_col = list("thetas_mod_round_2"),
  df_parametros = list(rownames_to_column(data.frame(pars_mod_round_2),var = "Item")),
  save = list(T), 
  path = list("1-SME-MAT-9EF/TRI/RODADA 2/")), 
  .f = gera_tri_item_plot)

pwalk(.l = list(
  item = str_replace(est_itens_round_3,"D","Q"), 
  thetas_col = list("thetas_mod_round_3"),
  df_parametros = list(rownames_to_column(data.frame(pars_mod_round_3),var = "Item")),
  save = list(T), 
  path = list("1-SME-MAT-9EF/TRI/RODADA 3/")), 
  .f = gera_tri_item_plot)

pwalk(.l = list(
  item = str_replace(est_itens_round_4,"D","Q"), 
  thetas_col = list("thetas_mod_round_4"),
  df_parametros = list(rownames_to_column(data.frame(pars_mod_round_4),var = "Item")),
  save = list(T), 
  path = list("1-SME-MAT-9EF/TRI/RODADA 4/")), 
  .f = gera_tri_item_plot)

pwalk(.l = list(
  item = str_replace(est_itens,"D","Q"), 
  thetas_col = list("thetas_est_eap"),
  df_parametros = list(as.data.frame(df_parametros)),
  save = list(T), 
  path = list("1-SME-MAT-9EF/TRI/EAP/")), 
  .f = gera_tri_item_plot)





















